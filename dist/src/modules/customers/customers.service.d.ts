import { PrismaService } from '../../prisma/prisma.service';
import { CreateCustomerDto } from './dto/create-customer.dto';
import { UpdateCustomerDto } from './dto/update-customer.dto';
import { CustomerStatsDto } from './dto/customer-stats.dto';
export declare class CustomersService {
    private prisma;
    constructor(prisma: PrismaService);
    create(createCustomerDto: CreateCustomerDto, userId: string): Promise<{
        customerId?: string | undefined;
        totalOrders?: number | undefined;
        totalSpent?: number | undefined;
        averageOrderValue?: number | undefined;
        lastOrderDate?: Date | undefined;
        firstOrderDate?: Date | undefined;
        activeDeals?: number | undefined;
        usedDeals?: number | undefined;
        favoriteCategories?: string[] | undefined;
        tier?: string | undefined;
        loyaltyPoints?: number | undefined;
        registrationDate?: Date | undefined;
        daysSinceLastOrder?: number | undefined;
        totalSavings?: number | undefined;
        _count: {
            orders: number;
        };
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    findAll(page?: number, limit?: number, search?: string, isActive?: boolean): Promise<{
        data: {
            customerId?: string | undefined;
            totalOrders?: number | undefined;
            totalSpent?: number | undefined;
            averageOrderValue?: number | undefined;
            lastOrderDate?: Date | undefined;
            firstOrderDate?: Date | undefined;
            activeDeals?: number | undefined;
            usedDeals?: number | undefined;
            favoriteCategories?: string[] | undefined;
            tier?: string | undefined;
            loyaltyPoints?: number | undefined;
            registrationDate?: Date | undefined;
            daysSinceLastOrder?: number | undefined;
            totalSavings?: number | undefined;
            _count: {
                orders: number;
            };
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string | null;
            userId: string | null;
            firstName: string | null;
            lastName: string | null;
            dateOfBirth: Date | null;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
        };
    }>;
    findOne(id: string): Promise<{
        customerId?: string | undefined;
        totalOrders?: number | undefined;
        totalSpent?: number | undefined;
        averageOrderValue?: number | undefined;
        lastOrderDate?: Date | undefined;
        firstOrderDate?: Date | undefined;
        activeDeals?: number | undefined;
        usedDeals?: number | undefined;
        favoriteCategories?: string[] | undefined;
        tier?: string | undefined;
        loyaltyPoints?: number | undefined;
        registrationDate?: Date | undefined;
        daysSinceLastOrder?: number | undefined;
        totalSavings?: number | undefined;
        _count: {
            orders: number;
        };
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    findByEmail(email: string): Promise<{
        customerId?: string | undefined;
        totalOrders?: number | undefined;
        totalSpent?: number | undefined;
        averageOrderValue?: number | undefined;
        lastOrderDate?: Date | undefined;
        firstOrderDate?: Date | undefined;
        activeDeals?: number | undefined;
        usedDeals?: number | undefined;
        favoriteCategories?: string[] | undefined;
        tier?: string | undefined;
        loyaltyPoints?: number | undefined;
        registrationDate?: Date | undefined;
        daysSinceLastOrder?: number | undefined;
        totalSavings?: number | undefined;
        _count: {
            orders: number;
        };
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    update(id: string, updateCustomerDto: UpdateCustomerDto, userId: string): Promise<{
        customerId?: string | undefined;
        totalOrders?: number | undefined;
        totalSpent?: number | undefined;
        averageOrderValue?: number | undefined;
        lastOrderDate?: Date | undefined;
        firstOrderDate?: Date | undefined;
        activeDeals?: number | undefined;
        usedDeals?: number | undefined;
        favoriteCategories?: string[] | undefined;
        tier?: string | undefined;
        loyaltyPoints?: number | undefined;
        registrationDate?: Date | undefined;
        daysSinceLastOrder?: number | undefined;
        totalSavings?: number | undefined;
        _count: {
            orders: number;
        };
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    remove(id: string, userId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getCustomerStats(id: string): Promise<CustomerStatsDto>;
    private calculateCustomerStats;
    private getFavoriteCategories;
    private calculateCustomerTier;
    private calculateTotalSavings;
    searchCustomers(query: string, filters?: any): Promise<({
        _count: {
            orders: number;
        };
    } & {
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    })[]>;
    updatePreferences(id: string, preferences: any, userId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getPreferences(id: string): Promise<{
        customerId: string;
        preferences: import("@prisma/client/runtime/library").JsonValue;
    }>;
    deactivate(id: string, userId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    reactivate(id: string, userId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getCustomerInsights(id: string): Promise<{
        customer: {
            id: string;
            name: string;
            email: string;
            tier: string | undefined;
            loyaltyPoints: number | undefined;
        };
        stats: Partial<CustomerStatsDto>;
        recentOrders: ({
            deal: {
                category: {
                    id: string;
                    name: string;
                    description: string | null;
                    icon: string | null;
                    color: string | null;
                    image: string | null;
                    parentId: string | null;
                    level: number;
                    path: string | null;
                    sortOrder: number;
                    tags: string[];
                    metadata: import("@prisma/client/runtime/library").JsonValue | null;
                    isActive: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                } | null;
                merchant: {
                    id: string;
                    name: string;
                    description: string | null;
                    isActive: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                    email: string;
                    phone: string | null;
                    address: string | null;
                    city: string | null;
                    province: string | null;
                    postalCode: string | null;
                    website: string | null;
                    logo: string | null;
                    images: string[];
                };
            } & {
                id: string;
                description: string | null;
                createdAt: Date;
                updatedAt: Date;
                images: string[];
                title: string;
                dealPrice: import("@prisma/client/runtime/library").Decimal;
                discountPrice: import("@prisma/client/runtime/library").Decimal;
                validFrom: Date;
                validUntil: Date;
                status: import("@prisma/client").$Enums.DealStatus;
                maxQuantity: number | null;
                soldQuantity: number;
                terms: string | null;
                merchantId: string;
                categoryId: string | null;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import("@prisma/client").$Enums.OrderStatus;
            orderNumber: string;
            quantity: number;
            totalAmount: import("@prisma/client/runtime/library").Decimal;
            paymentMethod: string | null;
            paymentReference: string | null;
            customerId: string;
            dealId: string;
        })[];
        activeCoupons: ({
            deal: {
                merchant: {
                    id: string;
                    name: string;
                    description: string | null;
                    isActive: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                    email: string;
                    phone: string | null;
                    address: string | null;
                    city: string | null;
                    province: string | null;
                    postalCode: string | null;
                    website: string | null;
                    logo: string | null;
                    images: string[];
                };
            } & {
                id: string;
                description: string | null;
                createdAt: Date;
                updatedAt: Date;
                images: string[];
                title: string;
                dealPrice: import("@prisma/client/runtime/library").Decimal;
                discountPrice: import("@prisma/client/runtime/library").Decimal;
                validFrom: Date;
                validUntil: Date;
                status: import("@prisma/client").$Enums.DealStatus;
                maxQuantity: number | null;
                soldQuantity: number;
                terms: string | null;
                merchantId: string;
                categoryId: string | null;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import("@prisma/client").$Enums.CouponStatus;
            dealId: string;
            qrCode: string;
            usedAt: Date | null;
            expiresAt: Date;
            orderId: string;
        })[];
    }>;
    getTopCustomers(limit?: number): Promise<{
        totalSpent: number;
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: import("@prisma/client").$Enums.OrderStatus;
            orderNumber: string;
            quantity: number;
            totalAmount: import("@prisma/client/runtime/library").Decimal;
            paymentMethod: string | null;
            paymentReference: string | null;
            customerId: string;
            dealId: string;
        }[];
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        phone: string | null;
        userId: string | null;
        firstName: string | null;
        lastName: string | null;
        dateOfBirth: Date | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
    }[]>;
}
